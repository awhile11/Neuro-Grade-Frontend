<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>NeuroGrade - Students</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  body {
    display: flex;
    background: #f8f9fa;
    height: 100vh;
    color: #333;
    overflow: hidden;
  }

  /* Top left logo */
  .top-left-logo {
    position: absolute;
    top: -35px;
    left: -10px;
    height: 200px;
    z-index: 1000;
  }

  /* Sidebar */
   .sidebar {
  width: 200px;
  height: 100vh;
  background: #fff;
  padding: 20px;
  border-right: 1px solid #ddd;
  display: flex;
  flex-direction: column;
  align-items: flex-start; /* align items horizontally (left-align) */
  justify-content: center; /* center contents vertically */
  box-shadow: 2px 0 8px rgba(0,0,0,0.08);
  border-radius: 0 12px 12px 0;
  transition: all 0.3s ease;
}
  .nav {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 100%;
  }

  .nav a {
    text-decoration: none;
    width: 100%;
  }

  .nav button {
    background: none;
    border: 1px solid rgba(0,0,0,0.08);
    font-size: 16px;
    padding: 12px 15px;
    text-align: left;
    cursor: pointer;
    border-radius: 6px;
    transition: all 0.3s ease;
    color: #333;
    width: 100%;
    display: flex;
    align-items: center;
    gap: 15px;
    position: relative;
    overflow: hidden;
  }

  .nav button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(142, 68, 173, 0.1), transparent);
    transition: left 0.5s ease;
  }

  .nav button:hover::before {
    left: 100%;
  }

  .nav button.active {
    background: #8e44ad;
    color: #fff;
    font-weight: bold;
    border-color: #6c3483;
    transform: translateX(5px);
    box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
  }

  .nav button:hover {
    background: #f0e6f5;
    color: #8e44ad;
    border-color: #8e44ad;
    transform: translateX(3px);
  }

  .nav button i {
    transition: transform 0.3s ease;
  }

  .nav button:hover i {
    transform: scale(1.2);
  }

  .nav button.active i {
    transform: scale(1.2);
    color: #fff;
  }

  /* Main content */
  .main {
    flex: 1;
    padding: 20px;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    margin-top: 70px;
    background: #f8f9fa;
    transition: all 0.3s ease;
  }

  /* Top bar */
  .top-bar {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: 20px;
    margin-bottom: 20px;
    padding: 15px;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    border: 1px solid rgba(0,0,0,0.05);
  }

  .icon-link {
    position: relative;
    text-decoration: none;
    color: #8e44ad;
    font-size: 20px;
    transition: transform 0.3s, color 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #f0e6f5;
    margin-top: -10px;
    border: 1px solid rgba(142, 68, 173, 0.2);
  }

  .icon-link:hover {
    transform: scale(1.2) rotate(5deg);
    color: #ff6b6b;
    background: #ffe9e9;
    border-color: rgba(255, 107, 107, 0.3);
  }

  .icon-badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #ff6b6b;
    color: white;
    border-radius: 50%;
    width: 18px;
    height: 18px;
    font-size: 11px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    border: 1px solid #fff;
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }

  .top-user {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 14px;
    padding: 8px 15px;
    background: #f8f9fa;
    border-radius: 20px;
    border: 1px solid rgba(0,0,0,0.08);
    transition: all 0.3s ease;
  }

  .top-user:hover {
    background: #f0e6f5;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }

  .top-user img {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    object-fit: cover;
    transition: all 0.3s ease;
  }

  .top-user:hover img {
    transform: scale(1.1);
    border: 2px solid #8e44ad;
  }

  /* Layout */
  .students-layout {
    display: flex;
    gap: 20px;
    flex: 1;
  }

  /* Student list */
  .student-list {
    width: 250px;
    background: #fff;
    border-radius: 12px;
    padding: 15px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.08);
    display: flex;
    flex-direction: column;
    gap: 10px;
    border: 1px solid rgba(0,0,0,0.08);
    transition: all 0.3s ease;
  }

  .student-list:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  }

  .student-list input {
    width: 100%;
    padding: 10px;
    font-size: 13px;
    border: 1px solid #ddd;
    border-radius: 6px;
    transition: all 0.3s;
    background: #f8f9fa;
  }

  .student-list input:focus {
    outline: none;
    border-color: #8e44ad;
    box-shadow: 0 0 8px rgba(142, 68, 173, 0.4);
    background: #fff;
  }

  .students {
    flex: 1;
    margin-top: 10px;
    overflow-y: auto;
    max-height: 400px;
    padding: 5px;
    border: 1px solid rgba(0,0,0,0.05);
    border-radius: 8px;
    background: #f8f9fa;
  }

  .student-item {
    padding: 8px 10px;
    font-size: 14px;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    cursor: pointer;
    border-radius: 6px;
    transition: all 0.3s;
    border: 1px solid transparent;
    background: #fff;
    margin-bottom: 5px;
    position: relative;
    overflow: hidden;
  }

  .student-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(142, 68, 173, 0.1), transparent);
    transition: left 0.5s ease;
  }

  .student-item:hover::before {
    left: 100%;
  }

  .student-item:hover {
    background: #f0e6f5;
    color: #8e44ad;
    border-color: #8e44ad;
    transform: translateX(3px);
  }

  .student-item.active {
    background: #8e44ad;
    color: white;
    border-color: #6c3483;
    transform: translateX(5px);
    box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
  }

  /* Right panel */
  .student-details {
    flex: 1;
    background: #fff;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.08);
    display: flex;
    flex-direction: column;
    border: 1px solid rgba(0,0,0,0.08);
    transition: all 0.3s ease;
  }

  .student-details:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  }

  .tabs {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e9ecef;
  }

  .tabs button {
    border: 1px solid #ddd;
    background: #f8f9fa;
    padding: 8px 16px;
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .tabs button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(142, 68, 173, 0.1), transparent);
    transition: left 0.5s ease;
  }

  .tabs button:hover::before {
    left: 100%;
  }

  .tabs button.active {
    background: #8e44ad;
    color: white;
    font-weight: bold;
    border-color: #6c3483;
    transform: translateY(-2px);
    box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
  }

  .tabs button:hover {
    background: #f0e6f5;
    color: #8e44ad;
    border-color: #8e44ad;
    transform: translateY(-2px);
  }

  table {
    width: 100%;
    border-collapse: collapse;
    border-radius: 10px;
    overflow: hidden;
    border: 1px solid #e9ecef;
  }

  th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #e9ecef;
    font-size: 14px;
  }

  th {
    background: #8e44ad;
    color: white;
    font-weight: bold;
  }

  tr {
    transition: all 0.3s ease;
  }

  tr:hover {
    background: #f9f2fc;
    transform: translateX(3px);
  }

  /* Status badges */
  .status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    transition: all 0.3s ease;
  }
  
  .status-badge:hover {
    transform: scale(1.1);
  }
  
  .status-completed {
    background-color: #e8f5e9;
    color: #2e7d32;
  }
  
  .status-pending {
    background-color: #ffecb3;
    color: #f57c00;
  }
  
  .status-missing {
    background-color: #ffcdd2;
    color: #c62828;
  }

  /* Loading indicator */
  .loading {
    text-align: center;
    padding: 20px;
    color: #8e44ad;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
  }

  .loading i {
    font-size: 24px;
    margin-bottom: 10px;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
   0% { transform: rotate(0deg); }
   100% { transform: rotate(360deg); }
  }

  /* Empty state */
  .empty-state {
    text-align: center;
    padding: 30px;
    color: #888;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    transition: all 0.3s ease;
  }

  .empty-state:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  }

  .empty-state i {
    font-size: 40px;
    margin-bottom: 10px;
    color: #ddd;
    transition: all 0.3s ease;
  }

  .empty-state:hover i {
    color: #8e44ad;
    transform: scale(1.2);
  }

  /* Grade tab layout */
  .grade-layout { 
    display: grid; 
    grid-template-columns: 1fr 1fr; 
    gap: 20px; 
  }
  
  .grade-card { 
    background: #fff; 
    border-radius: 12px; 
    padding: 15px; 
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    border: 1px solid rgba(0,0,0,0.08);
    transition: all 0.3s ease;
  }
  
  .grade-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  }
  
  .grade-bottom { 
    grid-column: span 2; 
    display: flex; 
    justify-content: flex-start; 
    padding: 20px; 
  }
  
  .circular { 
    position: relative; 
    width: 160px; 
    height: 160px; 
    background: #f8f9fa;
    border-radius: 50%;
    border: 1px solid #e9ecef;
    transition: all 0.3s ease;
  }
  
  .circular:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  }
  
  .circular canvas { 
    position: absolute; 
    top: 0; 
    left: 0; 
  }
  
  .circular span { 
    position: absolute; 
    top: 50%; 
    left: 50%; 
    transform: translate(-50%, -50%); 
    font-size: 28px; 
    font-weight: bold; 
    transition: all 0.3s ease;
  }
  
  .circular:hover span {
    color: #8e44ad;
  }

  /* Menu toggle for mobile (hidden by default) */
  .menu-toggle {
    display: none;
    position: fixed;
    top: 20px;
    right: 20px;
    background: #8e44ad;
    color: white;
    border: none;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    font-size: 24px;
    cursor: pointer;
    z-index: 1001;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    transition: all 0.3s ease;
  }

  .menu-toggle:hover {
    background: #793a9c;
    transform: rotate(90deg);
  }

  /* Responsive design */
  @media (max-width: 992px) {
    .sidebar {
      position: fixed;
      left: -250px;
      height: 100%;
      z-index: 1000;
      margin-top: 0;
      border-radius: 0;
      transition: left 0.3s ease;
    }
    
    .sidebar.active {
      left: 0;
    }
    
    .main {
      margin-left: 0;
      margin-top: 20px;
    }
    
    .menu-toggle {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .students-layout {
      flex-direction: column;
    }
    
    .student-list {
      width: 100%;
    }
    
    .top-left-logo {
      top: 10px;
      left: 10px;
      height: 120px;
    }
  }

  @media (max-width: 576px) {
    .top-bar {
      flex-wrap: wrap;
      justify-content: center;
    }
    
    .top-user {
      order: -1;
      width: 100%;
      justify-content: center;
      margin-bottom: 10px;
    }
    
    .grade-layout {
      grid-template-columns: 1fr;
    }
    
    .grade-bottom {
      grid-column: span 1;
    }
  }
</style>
</head>
<body>
  <!-- Top left logo -->
  <img src="neuro grade logo.jpg" alt="NeuroGrade Logo" class="top-left-logo">

  <!-- Mobile menu toggle -->
  <button class="menu-toggle" id="menu-toggle">
    <i class="fas fa-bars"></i>
  </button>

  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <div class="nav">
      <a href="#"><button><i class="fas fa-home"></i> Home</button></a>
      <a href="#"><button><i class="fas fa-tasks"></i> Task</button></a>
      <a href="#"><button class="active"><i class="fas fa-users"></i> Students</button></a>
      <a href="#"><button><i class="fas fa-graduation-cap"></i> Practice</button></a>
      <a href="#"><button><i class="fas fa-comment-dots"></i> Feedback</button></a>
    </div>
  </div>

  <!-- Main -->
  <div class="main">
    <!-- Top bar -->
    <div class="top-bar">
      <a href="#" class="icon-link" id="mail-icon">
        <i class="fas fa-envelope"></i>
        <span class="icon-badge">0</span>
      </a>
      <a href="#" class="icon-link" id="notification-icon">
        <i class="fas fa-bell"></i>
        <span class="icon-badge">0</span>
      </a>
      <div class="top-user">
        <span><b>CAT-WOMAN</b><br><small>CATBAT12@gmail.com</small></span>
        <img src="https://placehold.co/35x35/8e44ad/FFFFFF?text=C" alt="User">
      </div>
    </div>

    <!-- Students Page -->
    <div id="students">
      <div class="students-layout">
        <!-- Left: Student list -->
        <div class="student-list">
          <input type="text" placeholder="Student number" id="studentNumberSearch">
          <input type="text" placeholder="Name" id="studentNameSearch">

          <div class="students" id="studentList">
            <!-- Student list will be populated from database -->
            <div class="loading">
              <i class="fas fa-spinner"></i>
              <p>Loading students from database...</p>
            </div>
          </div>
        </div>

        <!-- Right: Assignments/Tests/Grades -->
        <div class="student-details">
          <div class="tabs">
            <button class="tab-btn" data-tab="assignments">Assignments</button>
            <button class="tab-btn" data-tab="tests">Tests</button>
            <button class="tab-btn active" data-tab="grades">Grades</button>
          </div>

          <!-- Tab content -->
          <div id="assignments" class="tab-content" style="display:none;">
            <div class="loading">
              <i class="fas fa-spinner"></i>
              <p>Select a student to view assignments</p>
            </div>
          </div>

          <div id="tests" class="tab-content" style="display:none;">
            <div class="loading">
              <i class="fas fa-spinner"></i>
              <p>Select a student to view tests</p>
            </div>
          </div>

          <div id="grades" class="tab-content">
            <!-- Grades Tab Content -->
            <div class="grade-layout">
              <div class="grade-card">
                <h4>Assignments</h4>
                <canvas id="assignmentsChart"></canvas>
              </div>
              <div class="grade-card">
                <h4>Tests</h4>
                <canvas id="testsChart"></canvas>
              </div>
              <div class="grade-bottom">
                <div class="grade-card">
                  <h4>Overall Grade</h4>
                  <div class="circular">
                    <canvas id="overallGradeChart" width="160" height="160"></canvas>
                    <span id="gradeText">0%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
  // Chart instances
  let assignmentsChart, testsChart, overallGradeChart;

  // Initialize charts with zero data
  function initCharts() {
    // Updated labels to include months up to November
    const monthLabels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov"];
    
    // Assignments chart
    assignmentsChart = new Chart(document.getElementById('assignmentsChart'), {
      type: 'line',
      data: {
        labels: monthLabels,
        datasets: [{
          label: "Performance",
          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          borderColor: "#8e44ad",
          backgroundColor: "#8e44ad33",
          fill: true,
          tension: 0.3,
          pointBackgroundColor: "#8e44ad",
          pointBorderColor: "#fff",
          pointBorderWidth: 2,
          pointRadius: 4
        }]
      },
      options: { 
        plugins: { legend: { display: false } }, 
        scales: { 
          y: { 
            beginAtZero: true, 
            max: 100,
            grid: {
              color: 'rgba(0,0,0,0.05)'
            }
          },
          x: {
            grid: {
              color: 'rgba(0,0,0,0.05)'
            },
            ticks: {
              maxRotation: 0,
              callback: function(value, index, values) {
                // Show all month labels
                return monthLabels[index];
              }
            }
          }
        } 
      }
    });

    // Tests chart
    testsChart = new Chart(document.getElementById('testsChart'), {
      type: 'line',
      data: {
        labels: monthLabels,
        datasets: [{
          label: "Performance",
          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          borderColor: "#8e44ad",
          backgroundColor: "#8e44ad33",
          fill: true,
          tension: 0.3,
          pointBackgroundColor: "#8e44ad",
          pointBorderColor: "#fff",
          pointBorderWidth: 2,
          pointRadius: 4
        }]
      },
      options: { 
        plugins: { legend: { display: false } }, 
        scales: { 
          y: { 
            beginAtZero: true, 
            max: 100,
            grid: {
              color: 'rgba(0,0,0,0.05)'
            }
          },
          x: {
            grid: {
              color: 'rgba(0,0,0,0.05)'
            },
            ticks: {
              maxRotation: 0,
              callback: function(value, index, values) {
                // Show all month labels
                return monthLabels[index];
              }
            }
          }
        } 
      }
    });

    // Circular overall grade chart
    overallGradeChart = new Chart(document.getElementById('overallGradeChart'), {
      type: 'doughnut',
      data: {
        labels: ["Grade","Remaining"],
        datasets: [{
          data: [0, 100],
          backgroundColor: ["#8e44ad","#eee"],
          borderWidth: 1,
          borderColor: "#fff",
          cutout: "75%"
        }]
      },
      options: { 
        plugins: { legend: { display: false } },
        elements: {
          arc: {
            borderWidth: 1,
            borderColor: '#fff'
          }
        }
      }
    });
  }

  // Function to update charts with data from database
  function updateCharts(studentId) {
    // This is where you would fetch data from your database
    // For demonstration, we'll simulate fetching data
    fetchStudentData(studentId).then(studentData => {
      // Update assignments chart
      assignmentsChart.data.datasets[0].data = studentData.assignments;
      assignmentsChart.update();
      
      // Update tests chart
      testsChart.data.datasets[0].data = studentData.tests;
      testsChart.update();
      
      // Update overall grade chart
      const overallGrade = studentData.overallGrade;
      overallGradeChart.data.datasets[0].data = [overallGrade, 100 - overallGrade];
      overallGradeChart.update();
      
      // Update grade text
      document.getElementById('gradeText').textContent = `${overallGrade}%`;
    });
  }

  // Function to load test data from database
  function loadTestData(studentId) {
    const contentDiv = document.getElementById('tests');
    
    // Show loading state
    contentDiv.innerHTML = `
      <div class="loading">
        <i class="fas fa-spinner"></i>
        <p>Loading test data from database...</p>
      </div>
    `;
    
    // Simulate database call
    setTimeout(() => {
      // In a real application, you would fetch this from your database
      // This is where your database data will be displayed
      
      // Create empty table with correct structure
      let tableHTML = `
        <table>
          <thead>
            <tr>
              <th>Test Name</th>
              <th>Date</th>
              <th>Status</th>
              <th>AI Grade</th>
              <th>Updated Grade</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="5" style="text-align: center; padding: 20px;">
                Test data will be loaded from your database
              </td>
            </tr>
          </tbody>
        </table>
      `;
      
      contentDiv.innerHTML = tableHTML;
    }, 800);
  }

  // Simulate fetching student data from database
  function fetchStudentData(studentId) {
    return new Promise((resolve) => {
      // In a real application, you would fetch this from your database
      // This is sample data structure that would come from your database
      setTimeout(() => {
        // Sample data - replace with your actual database data
        const studentData = {
          assignments: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 11 months up to November
          tests: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 11 months up to November
          overallGrade: 0 // Will be populated from database
        };
        
        resolve(studentData);
      }, 500);
    });
  }

  // Tabs inside students
  document.querySelectorAll(".tab-btn").forEach(tab => {
    tab.addEventListener("click", () => {
      document.querySelectorAll(".tab-btn").forEach(t => t.classList.remove("active"));
      tab.classList.add("active");
      let tabName = tab.dataset.tab;
      document.querySelectorAll(".tab-content").forEach(c => c.style.display = "none");
      document.getElementById(tabName).style.display = "block";
      
      // Load data from database for active student
      const activeStudent = document.querySelector(".student-item.active");
      if (activeStudent) {
        loadTabData(tabName, activeStudent.dataset.studentId);
      }
    });
  });

  // Function to load data from database
  function loadTabData(tabName, studentId) {
    const contentDiv = document.getElementById(tabName);
    
    if (tabName === "grades") {
      // For grades tab, update charts with data from database
      updateCharts(studentId);
      return;
    } else if (tabName === "tests") {
      // For tests tab, load test data
      loadTestData(studentId);
      return;
    }
    
    contentDiv.innerHTML = `
      <div class="loading">
        <i class="fas fa-spinner"></i>
        <p>Loading ${tabName} data from database...</p>
      </div>
    `;
    
    // This is where you would make your actual database call
    // For demonstration, we'll simulate a database call with setTimeout
    setTimeout(() => {
      // In a real application, you would fetch data from your database
      // and populate the table based on the studentId and tabName
      
      // Example structure for database response
      let tableHTML = `
        <table>
          <thead>
            <tr>
      `;
      
      if (tabName === "assignments") {
        tableHTML += `
          <th>Assignment</th>
          <th>Due Date</th>
          <th>Status</th>
          <th>AI Grade</th>
          <th>Updated</th>
        </tr>
        </thead>
        <tbody>
          <tr><td colspan="5" style="text-align: center;">Data will be loaded from your database</td></tr>
        `;
      }
      
      tableHTML += `</tbody></table>`;
      contentDiv.innerHTML = tableHTML;
    }, 800);
  }

  // Function to load students from database
  function loadStudentsFromDatabase() {
    const studentList = document.getElementById("studentList");
    studentList.innerHTML = `
      <div class="loading">
        <i class="fas fa-spinner"></i>
        <p>Loading students from database...</p>
      </div>
    `;
    
    // Simulate database call
    setTimeout(() => {
      // In a real application, you would fetch this from your database
      // This is sample data that would come from your database
      const students = [
        { id: 1, name: "Vixen", studentNumber: "213245" },
        { id: 2, name: "Spider-Man", studentNumber: "402189" },
        { id: 3, name: "Bat-Girl", studentNumber: "401267" },
        { id: 4, name: "Flash", studentNumber: "321956" },
        { id: 5, name: "Wonder Woman", studentNumber: "567812" },
        { id: 6, name: "Superman", studentNumber: "901234" }
      ];
      
      let studentsHTML = "";
      students.forEach((student, index) => {
        studentsHTML += `
          <div class="student-item ${index === 0 ? 'active' : ''}" 
               data-student-id="${student.id}">
            ${student.name} <span>${student.studentNumber.substring(0, 4)}...</span>
          </div>
        `;
      });
      
      studentList.innerHTML = studentsHTML;
      
      // Add event listeners to student items
      document.querySelectorAll(".student-item").forEach(stu => {
        stu.addEventListener("click", function() {
          document.querySelectorAll(".student-item").forEach(s => s.classList.remove("active"));
          this.classList.add("active");
          
          // Load data for the selected student
          const studentId = this.dataset.studentId;
          const activeTab = document.querySelector(".tab-btn.active").dataset.tab;
          loadTabData(activeTab, studentId);
        });
      });
    }, 1000);
  }

  // Search functionality
  document.getElementById("studentNumberSearch").addEventListener("input", filterStudents);
  document.getElementById("studentNameSearch").addEventListener("input", filterStudents);

  function filterStudents() {
    const numberSearch = document.getElementById("studentNumberSearch").value.toLowerCase();
    const nameSearch = document.getElementById("studentNameSearch").value.toLowerCase();
    
    document.querySelectorAll(".student-item").forEach(student => {
      const studentNumber = student.querySelector("span").textContent.toLowerCase();
      const studentName = student.textContent.split(" ")[0].toLowerCase();
      
      const numberMatch = studentNumber.includes(numberSearch);
      const nameMatch = studentName.includes(nameSearch);
      
      student.style.display = (numberMatch && nameMatch) ? "flex" : "none";
    });
  }

  // Mobile menu toggle
  const menuToggle = document.getElementById('menu-toggle');
  const sidebar = document.getElementById('sidebar');
  const overlay = document.createElement('div');
  overlay.className = 'overlay';
  document.body.appendChild(overlay);
  
  menuToggle.addEventListener('click', () => {
    sidebar.classList.toggle('active');
    overlay.style.display = sidebar.classList.contains('active') ? 'block' : 'none';
  });

  overlay.addEventListener('click', () => {
    sidebar.classList.remove('active');
    overlay.style.display = 'none';
  });

  // Initialize page
  document.addEventListener("DOMContentLoaded", () => {
    loadStudentsFromDatabase();
    initCharts();
    
    // Sidebar navigation
    document.querySelectorAll(".nav button").forEach(button => {
      button.addEventListener("click", function() {
        document.querySelectorAll(".nav button").forEach(btn => btn.classList.remove("active"));
        this.classList.add("active");
      });
    });
  });
</script>
</body>
</html>
